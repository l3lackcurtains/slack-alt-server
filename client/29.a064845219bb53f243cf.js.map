{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["PDFPreview","React","PureComponent","constructor","props","super","pageIndex","this","pdfPagesRendered","state","pdfPagesLoaded","canvas","refs","context","getContext","viewport","pdfPages","getViewport","height","width","renderContext","canvasContext","render","setState","pdf","numPages","loading","success","PDFJS","getDocument","fileUrl","then","onDocumentLoad","onDocumentLoadError","i","getPage","onPageLoad","reason","console","log","page","Object","assign","componentDidMount","updateStateFromProps","UNSAFE_componentWillReceiveProps","nextProps","componentDidUpdate","renderPDFPage","className","fileInfo","pdfCanvases","push","ref","key","fileDownloadUrl","link","getFileDownloadUrl","id","href","defaultMessage","PropTypes","object","isRequired","string"],"mappings":"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","file":"29.a064845219bb53f243cf.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n            this.pdfPagesRendered = {};\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    renderPDFPage = (pageIndex) => {\n        if (this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) {\n            return;\n        }\n\n        const canvas = this.refs['pdfCanvas' + pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(1);\n\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    updateStateFromProps = (props) => {\n        this.setState({\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        });\n\n        PDFJS.getDocument(props.fileUrl).then(this.onDocumentLoad, this.onDocumentLoadError);\n    }\n\n    onDocumentLoad = (pdf) => {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError = (reason) => {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad = (page) => {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={'pdfCanvas' + i}\n                    key={'previewpdfcanvas' + i}\n                />\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            const fileDownloadUrl = this.props.fileInfo.link || getFileDownloadUrl(this.props.fileInfo.id);\n\n            pdfCanvases.push(\n                <a\n                    key='previewpdfmorepages'\n                    href={fileDownloadUrl}\n                    className='pdf-max-pages'\n                >\n                    <FormattedMessage\n                        id='pdf_preview.max_pages'\n                        defaultMessage='Download to read more pages'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}