{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/signup/signup_controller/signup_controller.jsx","webpack:///./components/signup/signup_controller/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","SignupController","Component","constructor","super","async","token","inviteId","data","team","error","actions","addUserToTeamFromInvite","browserHistory","push","name","Constants","DEFAULT_CHANNEL","handleInvalidInvite","getTeamInviteInfo","setState","serverError","loading","err","server_error_id","message","noOpenServerError","signupControls","enableSignUpWithEmail","key","window","location","search","component","t","enableSignUpWithGitLab","href","Client4","getOAuthRoute","isLicensed","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLDAP","params","URLSearchParams","append","query","LDAPText","ldapLoginFieldName","enableSAML","samlLoginButtonText","length","signupDisabledError","margin","usedBefore","get","loggedIn","enableOpenServer","noAccounts","state","componentDidMount","removeGlobalItem","userLoggedIn","getInviteInfo","GlobalActions","renderSignupControls","alt","src","logoImage","siteName","PropTypes","object","bool","isRequired","string","shape","func","connect","ownProps","license","getLicense","config","getConfig","IsLicensed","EnableOpenServer","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","getGlobalItem","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"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","file":"19.a78b1dbb4e4930b5f92a.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/44dc1a6364d65586df56128a8b7dc29f.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport FormError from 'components/form_error';\nimport LocalizedIcon from 'components/localized_icon';\n\nimport LoadingScreen from 'components/loading_screen';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class SignupController extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        loggedIn: PropTypes.bool.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        noAccounts: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableLDAP: PropTypes.bool.isRequired,\n        enableSAML: PropTypes.bool.isRequired,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        usedBefore: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            removeGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (!this.props.loggedIn) {\n                usedBefore = props.usedBefore;\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.removeGlobalItem('team');\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = this.props.loggedIn;\n\n            if ((inviteId || token) && userLoggedIn) {\n                this.addUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                this.getInviteInfo(inviteId);\n            } else if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    addUserToTeamFromInvite = async (token, inviteId) => {\n        const {data: team, error} = await this.props.actions.addUserToTeamFromInvite(token, inviteId);\n        if (team) {\n            browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                serverError: '',\n                loading: false,\n            });\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else if (err.server_error_id === 'api.team.add_user_to_team_from_invite.guest.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls = () => {\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-envelope'\n                            component='span'\n                            title={{id: t('signup.email.icon'), defaultMessage: 'Email Icon'}}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            const params = new URLSearchParams(this.props.location.search);\n            params.append('extra', 'create_ldap');\n            const query = '?' + params.toString();\n\n            let LDAPText = (\n                <FormattedMessage\n                    id='signup.ldap'\n                    defaultMessage='AD/LDAP Credentials'\n                />\n            );\n            if (this.props.ldapLoginFieldName) {\n                LDAPText = this.props.ldapLoginFieldName;\n            }\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-folder-open fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.ldap.icon'), defaultMessage: 'AD/LDAP Icon'}}\n                        />\n                        <span>\n                            {LDAPText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-lock fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.saml.icon'), defaultMessage: 'SAML Icon'}}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='mt-8'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {getGlobalItem} from 'selectors/storage';\nimport {removeGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const siteName = config.SiteName;\n\n    let usedBefore;\n    if (ownProps.location.search) {\n        const params = new URLSearchParams(ownProps.location.search);\n        let token = params.get('t');\n        if (token == null) {\n            token = '';\n        }\n        usedBefore = getGlobalItem(state, token, null);\n    }\n\n    return {\n        loggedIn: Boolean(getCurrentUserId(state)),\n        isLicensed,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        ldapLoginFieldName,\n        siteName,\n        usedBefore,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeGlobalItem,\n            getTeamInviteInfo,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupController);\n"],"sourceRoot":""}