{"version":3,"sources":["webpack:///./components/widgets/icons/checkbox_checked_icon.jsx","webpack:///./images/deep-linking/deeplinking-desktop-img.png","webpack:///./images/deep-linking/deeplinking-mobile-img.png","webpack:///./images/logo.svg","webpack:///./components/linking_landing_page/linking_landing_page.tsx","webpack:///./components/linking_landing_page/index.tsx"],"names":["CheckboxCheckedIcon","React","PureComponent","render","width","height","viewBox","id","stroke","strokeWidth","fillRule","transform","d","module","exports","LinkingLandingPage","constructor","props","super","this","state","navigating","BrowserStore","clearLandingPreference","siteUrl","landingPreference","getLandingPreference","LandingPreferenceTypes","BROWSER","MATTERMOSTAPP","rememberChecked","setState","pref","clearIfNotChecked","setLandingPreferenceToMattermostApp","setLandingPreferenceToBrowser","setPreference","redirectPage","window","location","href","nativeLocation","UserAgent","defaultMessage","Utils","onMouseDown","onClick","timeout","setTimeout","replace","getDownloadLink","addEventListener","clearTimeout","className","renderSystemDialogMessage","iosAppLink","androidAppLink","desktopAppLink","brandImageError","src","mobileImg","desktopImg","downloadLink","values","link","renderDownloadLinkText","isMobile","openingLink","enableCustomBrand","viewApp","siteName","renderDialogHeader","renderDownloadLinkSection","renderGoNativeAppMessage","handleChecked","renderCheckboxIcon","header","MattermostLogoSvg","brandImageUrl","customLogo","onError","handleBrandImageError","hasSeenLandingPage","setLandingPageSeen","componentDidMount","defaultTheme","checkLandingPreferenceApp","openMattermostApp","clearLandingPreferenceIfNotChecked","componentWillUnmount","removeEventListener","checkLandingPreferenceBrowser","openInBrowser","renderHeader","renderGraphic","renderDialogBody","connect","config","getConfig","AppDownloadLink","IosAppDownloadLink","AndroidAppDownloadLink","getTheme","SiteURL","SiteName","Client4","getBrandImageUrl","EnableCustomBrand"],"mappings":"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","file":"15.0de71d6df88586b86f00.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/c30f3344788f93968f046bd9472d5cd5.png\";","module.exports = __webpack_public_path__ + \"files/5e67801b5620f74e65d64b17d9d7297c.png\";","module.exports = __webpack_public_path__ + \"files/5ebcaf72977c6c3ca8b636edcc2677f1.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport desktopImg from 'images/deep-linking/deeplinking-desktop-img.png';\nimport mobileImg from 'images/deep-linking/deeplinking-mobile-img.png';\nimport MattermostLogoSvg from 'images/logo.svg';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport BrowserStore from 'stores/browser_store';\nimport {LandingPreferenceTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport * as UserAgent from 'utils/user_agent';\n\ntype Props = {\n    defaultTheme: any;\n    desktopAppLink?: string;\n    iosAppLink?: string;\n    androidAppLink?: string;\n    siteUrl?: string;\n    siteName?: string;\n    brandImageUrl?: string;\n    enableCustomBrand: boolean;\n}\n\ntype State = {\n    rememberChecked: boolean;\n    redirectPage: boolean;\n    location: string;\n    nativeLocation: string;\n    brandImageError: boolean;\n    navigating: boolean;\n}\n\nexport default class LinkingLandingPage extends PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const location = window.location.href.replace('/landing#', '');\n\n        this.state = {\n            rememberChecked: false,\n            redirectPage: false,\n            location,\n            nativeLocation: location.replace(/^(https|http)/, 'mattermost'),\n            brandImageError: false,\n            navigating: false,\n        };\n\n        if (Utils.isMobile() && !BrowserStore.hasSeenLandingPage()) {\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    componentDidMount() {\n        Utils.applyTheme(this.props.defaultTheme);\n        if (this.checkLandingPreferenceApp()) {\n            this.openMattermostApp();\n        }\n\n        window.addEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    clearLandingPreferenceIfNotChecked = () => {\n        if (!this.state.navigating) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n    }\n\n    checkLandingPreferenceBrowser = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.BROWSER;\n    }\n\n    checkLandingPreferenceApp = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.MATTERMOSTAPP;\n    }\n\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.state.rememberChecked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n        this.setState({rememberChecked: !this.state.rememberChecked});\n    }\n\n    setPreference = (pref: string, clearIfNotChecked?: boolean) => {\n        if (!this.state.rememberChecked) {\n            if (clearIfNotChecked) {\n                BrowserStore.clearLandingPreference();\n            }\n            return;\n        }\n\n        switch (pref) {\n        case LandingPreferenceTypes.MATTERMOSTAPP:\n            BrowserStore.setLandingPreferenceToMattermostApp(this.props.siteUrl);\n            break;\n        case LandingPreferenceTypes.BROWSER:\n            BrowserStore.setLandingPreferenceToBrowser(this.props.siteUrl);\n            break;\n        default:\n            break;\n        }\n    }\n\n    openMattermostApp = () => {\n        this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP);\n        this.setState({redirectPage: true});\n        window.location.href = this.state.nativeLocation;\n    }\n\n    openInBrowser = () => {\n        this.setPreference(LandingPreferenceTypes.BROWSER);\n        window.location.href = this.state.location;\n    }\n\n    renderSystemDialogMessage = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.systemDialogMessageMobile'\n                    defaultMessage='View in App'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.systemDialogMessage'\n                defaultMessage='View in Desktop App'\n            />\n        );\n    }\n\n    renderGoNativeAppMessage = () => {\n        return (\n            <a\n                href={Utils.isMobile() ? '#' : this.state.nativeLocation}\n                onMouseDown={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                }}\n                onClick={() => {\n                    this.setState({redirectPage: true, navigating: true});\n                    if (Utils.isMobile()) {\n                        if (UserAgent.isAndroidWeb()) {\n                            const timeout = setTimeout(() => {\n                                window.location.replace(this.getDownloadLink()!);\n                            }, 2000);\n                            window.addEventListener('blur', () => {\n                                clearTimeout(timeout);\n                            });\n                        }\n                        window.location.replace(this.state.nativeLocation);\n                    }\n                }}\n                className='btn btn-primary btn-lg get-app__download'\n            >\n                {this.renderSystemDialogMessage()}\n            </a>\n        );\n    }\n\n    getDownloadLink = () => {\n        if (UserAgent.isIosWeb()) {\n            return this.props.iosAppLink;\n        } else if (UserAgent.isAndroidWeb()) {\n            return this.props.androidAppLink;\n        }\n\n        return this.props.desktopAppLink;\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    renderCheckboxIcon = () => {\n        if (this.state.rememberChecked) {\n            return (\n                <CheckboxCheckedIcon/>\n            );\n        }\n\n        return null;\n    }\n\n    renderGraphic = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <img src={mobileImg}/>\n            );\n        }\n\n        return (\n            <img src={desktopImg}/>\n        );\n    }\n\n    renderDownloadLinkText = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.dontHaveTheMobileApp'\n                    defaultMessage={'Don\\'t have the Mobile App?'}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.dontHaveTheDesktopApp'\n                defaultMessage={'Don\\'t have the Desktop App?'}\n            />\n        );\n    }\n\n    renderDownloadLinkSection = () => {\n        const downloadLink = this.getDownloadLink();\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__download-link'>\n                    <FormattedMarkdownMessage\n                        id='get_app.openLinkInBrowser'\n                        defaultMessage='Or, [open this link in your browser.](!{link})'\n                        values={{\n                            link: this.state.location,\n                        }}\n                    />\n                </div>\n            );\n        } else if (downloadLink) {\n            return (\n                <div className='get-app__download-link'>\n                    {this.renderDownloadLinkText()}\n                    {'\\u00A0'}\n                    <br/>\n                    <a href={downloadLink}>\n                        <FormattedMessage\n                            id='get_app.downloadTheAppNow'\n                            defaultMessage='Download the app now.'\n                        />\n                    </a>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    renderDialogHeader = () => {\n        const downloadLink = this.getDownloadLink();\n        const isMobile = UserAgent.isMobile();\n\n        let openingLink = (\n            <FormattedMessage\n                id='get_app.openingLink'\n                defaultMessage='Opening link in Mattermost...'\n            />\n        );\n        if (this.props.enableCustomBrand) {\n            openingLink = (\n                <FormattedMessage\n                    id='get_app.openingLinkWhiteLabel'\n                    defaultMessage='Opening link in the Desktop App...'\n                />\n            );\n        }\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__launching'>\n                    {openingLink}\n                    <div className={`get-app__alternative${this.state.redirectPage ? ' redirect-page' : ''}`}>\n                        <FormattedMessage\n                            id='get_app.redirectedInMoments'\n                            defaultMessage='You will be redirected in a few moments.'\n                        />\n                        <br/>\n                        {this.renderDownloadLinkText()}\n                        {'\\u00A0'}\n                        <br className='mobile-only'/>\n                        <a href={downloadLink}>\n                            <FormattedMessage\n                                id='get_app.downloadTheAppNow'\n                                defaultMessage='Download the app now.'\n                            />\n                        </a>\n                    </div>\n                </div>\n            );\n        }\n\n        let viewApp = (\n            <FormattedMessage\n                id='get_app.ifNothingPrompts'\n                defaultMessage='You can view {siteName} in the desktop app or continue in your web browser.'\n                values={{\n                    siteName: this.props.enableCustomBrand ? '' : ' Mattermost',\n                }}\n            />\n        );\n        if (isMobile) {\n            viewApp = (\n                <FormattedMessage\n                    id='get_app.ifNothingPromptsMobile'\n                    defaultMessage='You can view {siteName} in the mobile app or continue in your web browser.'\n                    values={{\n                        siteName: this.props.enableCustomBrand ? '' : ' Mattermost',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='get-app__launching'>\n                <FormattedMessage\n                    id='get_app.launching'\n                    defaultMessage='Where would you like to view this?'\n                />\n                <div className='get-app__alternative'>\n                    {viewApp}\n                </div>\n            </div>\n        );\n    }\n\n    renderDialogBody = () => {\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__dialog-body'>\n                    {this.renderDialogHeader()}\n                    {this.renderDownloadLinkSection()}\n                </div>\n            );\n        }\n\n        return (\n            <div className='get-app__dialog-body'>\n                {this.renderDialogHeader()}\n                <div className='get-app__buttons'>\n                    <div className='get-app__status'>\n                        {this.renderGoNativeAppMessage()}\n                    </div>\n                    <div className='get-app__status'>\n                        <a\n                            href={this.state.location}\n                            onMouseDown={() => {\n                                this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                            }}\n                            onClick={() => {\n                                this.setState({navigating: true});\n                            }}\n                            className='btn btn-default btn-lg get-app__continue'\n                        >\n                            <FormattedMessage\n                                id='get_app.continueToBrowser'\n                                defaultMessage='View in Browser'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='get-app__preference'>\n                    <button\n                        className={`get-app__checkbox ${this.state.rememberChecked ? 'checked' : ''}`}\n                        onClick={this.handleChecked}\n                    >\n                        {this.renderCheckboxIcon()}\n                    </button>\n                    <FormattedMessage\n                        id='get_app.rememberMyPreference'\n                        defaultMessage='Remember my preference'\n                    />\n                </div>\n                {this.renderDownloadLinkSection()}\n            </div>\n        );\n    }\n\n    renderHeader = () => {\n        let header = (\n            <div className='get-app__header'>\n                <img\n                    src={MattermostLogoSvg}\n                    className='get-app__logo'\n                />\n            </div>\n        );\n        if (this.props.enableCustomBrand && this.props.brandImageUrl) {\n            let customLogo;\n            if (this.props.brandImageUrl && !this.state.brandImageError) {\n                customLogo = (\n                    <img\n                        src={this.props.brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        className='get-app__custom-logo'\n                    />\n                );\n            }\n\n            header = (\n                <div className='get-app__header'>\n                    {customLogo}\n                    <div className='get-app__custom-site-name'>\n                        <span>{this.props.siteName}</span>\n                    </div>\n                </div>\n            );\n        }\n\n        return header;\n    }\n\n    render() {\n        const isMobile = UserAgent.isMobile();\n\n        if (this.checkLandingPreferenceBrowser()) {\n            this.openInBrowser();\n            return null;\n        }\n\n        return (\n            <div className='get-app'>\n                {this.renderHeader()}\n                <div className='get-app__dialog'>\n                    <div\n                        className={`get-app__graphic ${isMobile ? 'mobile' : ''}`}\n                    >\n                        {this.renderGraphic()}\n                    </div>\n                    {this.renderDialogBody()}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {GlobalState} from 'types/store';\n\nimport LinkingLandingPage from './linking_landing_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        desktopAppLink: config.AppDownloadLink,\n        iosAppLink: config.IosAppDownloadLink,\n        androidAppLink: config.AndroidAppDownloadLink,\n        defaultTheme: getTheme(state),\n        siteUrl: config.SiteURL,\n        siteName: config.SiteName,\n        brandImageUrl: Client4.getBrandImageUrl('0'),\n        enableCustomBrand: config.EnableCustomBrand === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(LinkingLandingPage);\n"],"sourceRoot":""}