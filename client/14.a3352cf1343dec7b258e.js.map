{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/widgets/icons/fa_logout_icon.jsx","webpack:///./components/common/infinite_scroll.jsx","webpack:///./components/widgets/icons/team_info_icon.jsx","webpack:///./components/select_team/components/select_team_item.jsx","webpack:///./components/select_team/select_team.jsx","webpack:///./components/select_team/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","LogoutIcon","InfiniteScroll","constructor","super","buffer","Math","abs","total","freq","ceil","isFetching","isEndofData","state","callBack","bufferValue","totalItems","itemsPerPage","pageNumber","node","current","validBuffer","validateBuffer","toScroll","scrollHeight","clientHeight","scrollTop","setState","async","amountOfPages","getAmountOfPages","debounce","handleScroll","createRef","componentDidMount","addEventListener","debounceHandleScroll","componentWillUnmount","removeEventListener","children","endOfDataMessage","styleClass","loaderStyle","showLoader","ref","style","message","PropTypes","isRequired","func","string","number","object","TeamInfoIcon","ariaLabel","width","height","viewBox","role","aria-label","transform","d","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","SelectTeamItem","e","preventDefault","onTeamClick","team","descriptionTooltip","Tooltip","delayShow","placement","overlay","rootClose","container","canJoinPublicTeams","canJoinPrivateTeams","loading","icon","component","t","canJoin","allow_open_invite","renderDescriptionTooltip","href","Utils","display_name","handleTeamClick","bool","SelectTeam","Component","currentPage","actions","response","getTeams","error","Error","prevState","siteURL","currentUserRoles","loadingTeamId","data","addUserToTeam","currentUserId","history","push","name","Constants","DEFAULT_CHANNEL","errorMsg","server_error_id","includes","PERMISSIONS_SYSTEM_ADMIN","values","trackEvent","emitUserLoggedOutEvent","endofTeamsData","currentListableTeams","listableTeams","length","slice","userId","fetchMoreTeams","loadRolesIfNeeded","split","currentUserIsGuest","canManageSystem","isMemberOfTeam","canCreateTeams","totalTeamsCount","openContent","joinableTeamContents","forEach","listableTeam","key","permissions","Permissions","CREATE_TEAM","invert","padding","teamSignUp","marginTop","adminConsoleLink","headerButton","UserAgent","MANAGE_SYSTEM","clearError","handleLogoutClick","alt","src","logoImage","array","shape","withRouter","connect","config","getConfig","currentUser","getCurrentUser","myTeamMemberships","Object","getTeamMemberships","roles","isGuest","CustomDescriptionText","getSortedListableTeams","locale","SiteName","haveISystemPermission","permission","JOIN_PUBLIC_TEAMS","JOIN_PRIVATE_TEAMS","SiteURL","entities","teams","totalCount","dispatch","bindActionCreators"],"mappings":"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","file":"14.a3352cf1343dec7b258e.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/44dc1a6364d65586df56128a8b7dc29f.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost'\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LogoutIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.logout'\n                defaultMessage='Logout Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-1x fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\n\nimport LoadingScreen from 'components/loading_screen';\n\nconst SCROLL_BUFFER = 100;\nconst DEBOUNCE_WAIT_TIME = 200;\n\nexport default class InfiniteScroll extends React.PureComponent {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n\n        /**\n         * Function that is called to load more items\n         */\n        callBack: PropTypes.func.isRequired,\n\n        /**\n         * Message to display when all the data has been scrolled through\n         */\n        endOfDataMessage: PropTypes.string,\n\n        /**\n         * A wrapper class to define styling of the infinite scroll\n         */\n        styleClass: PropTypes.string,\n\n        /**\n         * A number that determines how far the scroll is near the bottom before\n         * loading more items. The bigger this value the more items will be loaded\n         * much earlier as you scroll to the bottom.\n         */\n        bufferValue: PropTypes.number,\n\n        /**\n         * The total number of items to be scrolled through\n         */\n        totalItems: PropTypes.number.isRequired,\n\n        /**\n         * The number of items to load in a single fetch\n         */\n        itemsPerPage: PropTypes.number.isRequired,\n\n        /**\n         * The current page that has been scrolled to\n         */\n        pageNumber: PropTypes.number.isRequired,\n\n        /**\n         * Optional style object that's passed on to the underlying loader\n         * component\n         */\n\n        loaderStyle: PropTypes.object,\n    };\n\n    static defaultProps = {\n        bufferValue: SCROLL_BUFFER,\n        endOfDataMessage: '',\n        styleClass: '',\n        loaderStyle: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            isEndofData: false,\n        };\n        this.node = React.createRef();\n    }\n\n    componentDidMount() {\n        this.node.current.addEventListener('scroll', this.debounceHandleScroll);\n    }\n\n    componentWillUnmount() {\n        this.node.current.removeEventListener('scroll', this.debounceHandleScroll);\n    }\n\n    validateBuffer = (buffer) => {\n        if (buffer < SCROLL_BUFFER) {\n            return SCROLL_BUFFER;\n        }\n        return Math.abs(buffer);\n    }\n\n    getAmountOfPages = (total, freq) => {\n        return Math.ceil(total / freq);\n    }\n\n    handleScroll = () => {\n        const {isFetching, isEndofData} = this.state;\n        const {callBack, bufferValue, totalItems, itemsPerPage, pageNumber} = this.props;\n\n        const node = this.node.current;\n        const validBuffer = this.validateBuffer(bufferValue);\n\n        const toScroll = node.scrollHeight - node.clientHeight - validBuffer;\n        const nearBottom = node.scrollTop > toScroll;\n\n        if (nearBottom && !isEndofData && !isFetching) {\n            this.setState({isFetching: true},\n                async () => {\n                    await callBack();\n\n                    this.setState({\n                        isFetching: false,\n                    });\n\n                    if (totalItems === 0) {\n                        this.setState({\n                            isEndofData: true,\n                        });\n                        return;\n                    }\n\n                    const amountOfPages = this.getAmountOfPages(totalItems, itemsPerPage);\n\n                    if (pageNumber === amountOfPages) {\n                        this.setState({\n                            isEndofData: true,\n                        });\n                    }\n                });\n        }\n    }\n\n    debounceHandleScroll = debounce(this.handleScroll, DEBOUNCE_WAIT_TIME);\n\n    render() {\n        const {children, endOfDataMessage, styleClass, loaderStyle} = this.props;\n        const {isEndofData, isFetching} = this.state;\n        const showLoader = !isEndofData && isFetching; // show loader if fetching and end of data is not reached.\n        return (\n            // eslint-disable-next-line react/jsx-filename-extension\n            <>\n                <div\n                    className={`infinite-scroll ${styleClass}`}\n                    ref={this.node}\n                >\n                    {children}\n                    {showLoader && (\n                        <LoadingScreen\n                            style={loaderStyle}\n                            message=' '\n                        />\n                    )}\n                    {!showLoader && endOfDataMessage}\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class TeamInfoIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g transform='matrix(1.17647,0,0,1.17647,-1.55431e-15,-1.00573e-14)'>\n                                <path d='M8.5,0C3.797,0 0,3.797 0,8.5C0,13.203 3.797,17 8.5,17C13.203,17 17,13.203 17,8.5C17,3.797 13.203,0 8.5,0ZM10,8.5C10,7.672 9.328,7 8.5,7C7.672,7 7,7.672 7,8.5L7,12.45C7,13.278 7.672,13.95 8.5,13.95C9.328,13.95 10,13.278 10,12.45L10,8.5ZM8.5,3C9.328,3 10,3.672 10,4.5C10,5.328 9.328,6 8.5,6C7.672,6 7,5.328 7,4.5C7,3.672 7.672,3 8.5,3Z'/>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport TeamInfoIcon from 'components/widgets/icons/team_info_icon';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class SelectTeamItem extends React.PureComponent {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onTeamClick: PropTypes.func.isRequired,\n        loading: PropTypes.bool.isRequired,\n        canJoinPublicTeams: PropTypes.bool.isRequired,\n        canJoinPrivateTeams: PropTypes.bool.isRequired,\n    };\n\n    handleTeamClick = (e) => {\n        e.preventDefault();\n        this.props.onTeamClick(this.props.team);\n    }\n\n    renderDescriptionTooltip = () => {\n        const team = this.props.team;\n        if (!team.description) {\n            return null;\n        }\n\n        const descriptionTooltip = (\n            <Tooltip id='team-description__tooltip'>\n                {team.description}\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={1000}\n                placement='top'\n                overlay={descriptionTooltip}\n                rootClose={true}\n                container={this}\n            >\n                <TeamInfoIcon className='icon icon--info'/>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        const {canJoinPublicTeams, canJoinPrivateTeams, loading, team} = this.props;\n        let icon;\n        if (loading) {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-refresh fa-spin right signup-team__icon'\n                    component='span'\n                    title={{id: t('generic_icons.loading'), defaultMessage: 'Loading Icon'}}\n                />\n            );\n        } else {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-angle-right right signup-team__icon'\n                    component='span'\n                    title={{id: t('select_team.join.icon'), defaultMessage: 'Join Team Icon'}}\n                />\n            );\n        }\n\n        const canJoin = (team.allow_open_invite && canJoinPublicTeams) || (!team.allow_open_invite && canJoinPrivateTeams);\n\n        return (\n            <div className='signup-team-dir'>\n                {this.renderDescriptionTooltip()}\n                <a\n                    href='#'\n                    id={Utils.createSafeId(team.display_name)}\n                    onClick={canJoin ? this.handleTeamClick : null}\n                    className={canJoin ? '' : 'disabled'}\n                >\n                    <span className='signup-team-dir__name'>{team.display_name}</span>\n                    {!team.allow_open_invite &&\n                        <LocalizedIcon\n                            className='fa fa-lock light'\n                            title={{id: t('select_team.private.icon'), defaultMessage: 'Private team'}}\n                        />}\n                    {canJoin && icon}\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport * as UserAgent from 'utils/user_agent';\nimport Constants from 'utils/constants';\n\nimport logoImage from 'images/logo.png';\n\nimport AnnouncementBar from 'components/announcement_bar';\n\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport InfiniteScroll from '../common/infinite_scroll.jsx';\n\nimport SelectTeamItem from './components/select_team_item.jsx';\n\nexport const TEAMS_PER_PAGE = 30;\nconst TEAM_MEMBERSHIP_DENIAL_ERROR_ID = 'api.team.add_members.user_denied';\n\nexport default class SelectTeam extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        currentUserRoles: PropTypes.string,\n        currentUserIsGuest: PropTypes.bool,\n        customDescriptionText: PropTypes.string,\n        isMemberOfTeam: PropTypes.bool.isRequired,\n        listableTeams: PropTypes.array,\n        siteName: PropTypes.string,\n        canCreateTeams: PropTypes.bool.isRequired,\n        canManageSystem: PropTypes.bool.isRequired,\n        canJoinPublicTeams: PropTypes.bool.isRequired,\n        canJoinPrivateTeams: PropTypes.bool.isRequired,\n        history: PropTypes.object,\n        siteURL: PropTypes.string,\n        actions: PropTypes.shape({\n            getTeams: PropTypes.func.isRequired,\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n        totalTeamsCount: PropTypes.number.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingTeamId: '',\n            error: null,\n            endofTeamsData: false,\n            currentPage: 0,\n            currentListableTeams: [],\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.listableTeams.length !== state.currentListableTeams.length) {\n            return {\n                currentListableTeams: props.listableTeams.slice(0, TEAMS_PER_PAGE * state.currentPage),\n            };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_select_team', {userId: this.props.currentUserId});\n        this.fetchMoreTeams();\n        this.props.actions.loadRolesIfNeeded(this.props.currentUserRoles.split(' '));\n    }\n\n    fetchMoreTeams = async () => {\n        const {currentPage} = this.state;\n        const {actions} = this.props;\n\n        const response = await actions.getTeams(currentPage, TEAMS_PER_PAGE, true);\n\n        // We don't want to increase the page number if no data came back previously\n        if (!response.error && !(response.error instanceof Error)) {\n            this.setState((prevState) => (\n                {\n                    currentPage: prevState.currentPage + 1,\n                }\n            ),\n            );\n        }\n    }\n\n    handleTeamClick = async (team) => {\n        const {siteURL, currentUserRoles} = this.props;\n        this.setState({loadingTeamId: team.id});\n\n        const {data, error} = await this.props.actions.addUserToTeam(team.id, this.props.currentUserId);\n        if (data) {\n            this.props.history.push(`/${team.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            let errorMsg = error.message;\n\n            if (error.server_error_id === TEAM_MEMBERSHIP_DENIAL_ERROR_ID) {\n                if (currentUserRoles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN)) {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied_admin'\n                            defaultMessage={`You need to be a member of a linked group to join this team. You can add a group to this team [here](${siteURL}/admin_console/user_management/groups).`}\n                            values={{siteURL}}\n                        />\n                    );\n                } else {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied'\n                            defaultMessage='You need to be a member of a linked group to join this team.'\n                        />\n                    );\n                }\n            }\n\n            this.setState({\n                error: errorMsg,\n                loadingTeamId: '',\n            });\n        }\n    };\n\n    handleLogoutClick = (e) => {\n        e.preventDefault();\n        trackEvent('select_team', 'click_logout');\n        emitUserLoggedOutEvent('/login');\n    };\n\n    clearError = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n        });\n    };\n\n    render() {\n        const {currentPage, currentListableTeams} = this.state;\n        const {\n            currentUserIsGuest,\n            canManageSystem,\n            customDescriptionText,\n            isMemberOfTeam,\n            siteName,\n            canCreateTeams,\n            canJoinPublicTeams,\n            canJoinPrivateTeams,\n            totalTeamsCount,\n        } = this.props;\n\n        let openContent;\n        if (this.state.loadingTeamId) {\n            openContent = <LoadingScreen/>;\n        } else if (this.state.error) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>{this.state.error}</label>\n                    </div>\n                </div>\n            );\n        } else if (currentUserIsGuest) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>\n                            <FormattedMessage\n                                id='signup_team.guest_without_channels'\n                                defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        } else {\n            let joinableTeamContents = [];\n            currentListableTeams.forEach((listableTeam) => {\n                if ((listableTeam.allow_open_invite && canJoinPublicTeams) || (!listableTeam.allow_open_invite && canJoinPrivateTeams)) {\n                    joinableTeamContents.push(\n                        <SelectTeamItem\n                            key={'team_' + listableTeam.name}\n                            team={listableTeam}\n                            onTeamClick={this.handleTeamClick}\n                            loading={this.state.loadingTeamId === listableTeam.id}\n                            canJoinPublicTeams={canJoinPublicTeams}\n                            canJoinPrivateTeams={canJoinPrivateTeams}\n                        />,\n                    );\n                }\n            });\n\n            if (joinableTeamContents.length === 0 && (canCreateTeams || canManageSystem)) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <FormattedMessage\n                                id='signup_team.no_open_teams_canCreate'\n                                defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (joinableTeamContents.length === 0) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams_canCreate'\n                                    defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                            <SystemPermissionGate\n                                permissions={[Permissions.CREATE_TEAM]}\n                                invert={true}\n                            >\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams'\n                                    defaultMessage='No teams are available to join. Please ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                        </div>\n                    </div>\n                );\n            }\n\n            openContent = (\n                <div\n                    id='teamsYouCanJoinContent'\n                    className='signup__content'\n                >\n                    <h4>\n                        <FormattedMessage\n                            id='signup_team.join_open'\n                            defaultMessage='Teams you can join: '\n                        />\n                    </h4>\n                    <InfiniteScroll\n                        callBack={this.fetchMoreTeams}\n                        styleClass='signup-team-all'\n                        totalItems={totalTeamsCount}\n                        itemsPerPage={TEAMS_PER_PAGE}\n                        bufferValue={280}\n                        pageNumber={currentPage}\n                        loaderStyle={{padding: '0px', height: '40px'}}\n                    >\n                        {joinableTeamContents}\n                    </InfiniteScroll>\n                </div>\n            );\n        }\n\n        const teamSignUp = (\n            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                <div\n                    className='margin--extra'\n                    style={{marginTop: '0.5em'}}\n                >\n                    <Link\n                        id='createNewTeamLink'\n                        to='/create_team'\n                        onClick={() => trackEvent('select_team', 'click_create_team')}\n                        className='signup-team-login'\n                    >\n                        <FormattedMessage\n                            id='login.createTeam'\n                            defaultMessage='Create a new team'\n                        />\n                    </Link>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        let adminConsoleLink;\n        if (!UserAgent.isMobileApp()) {\n            adminConsoleLink = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                    <div className='mt-8 hidden-xs'>\n                        <Link\n                            to='/admin_console'\n                            className='signup-team-login'\n                            onClick={() => trackEvent('select_team', 'click_system_console')}\n                        >\n                            <FormattedMessage\n                                id='signup_team_system_console'\n                                defaultMessage='Go to System Console'\n                            />\n                        </Link>\n                    </div>\n                </SystemPermissionGate>\n            );\n        }\n\n        let headerButton;\n        if (this.state.error) {\n            headerButton = <BackButton onClick={this.clearError}/>;\n        } else if (isMemberOfTeam) {\n            headerButton = <BackButton/>;\n        } else {\n            headerButton = (\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        id='logout'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                {headerButton}\n                <div className='col-sm-12'>\n                    <div\n                        className={'signup-team__container'}\n                    >\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        {openContent}\n                        {teamSignUp}\n                        {adminConsoleLink}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getSortedListableTeams, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {addUserToTeam} from 'actions/team_actions';\nimport {isGuest} from 'utils/utils';\n\nimport SelectTeam from './select_team.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n    const myTeamMemberships = Object.values(getTeamMemberships(state));\n\n    return {\n        currentUserId: currentUser.id,\n        currentUserRoles: currentUser.roles || '',\n        currentUserIsGuest: isGuest(currentUser),\n        customDescriptionText: config.CustomDescriptionText,\n        isMemberOfTeam: myTeamMemberships && myTeamMemberships.length > 0,\n        listableTeams: getSortedListableTeams(state, currentUser.locale),\n        siteName: config.SiteName,\n        canCreateTeams: haveISystemPermission(state, {permission: Permissions.CREATE_TEAM}),\n        canManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        canJoinPublicTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PUBLIC_TEAMS}),\n        canJoinPrivateTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PRIVATE_TEAMS}),\n        siteURL: config.SiteURL,\n        totalTeamsCount: state.entities.teams.totalCount || 0,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            loadRolesIfNeeded,\n            addUserToTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SelectTeam));\n"],"sourceRoot":""}