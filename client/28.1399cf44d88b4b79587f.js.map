{"version":3,"sources":["webpack:///./components/password_reset_form/password_reset_form.js","webpack:///./components/password_reset_form/index.js"],"names":["PasswordResetForm","React","PureComponent","constructor","props","super","async","e","preventDefault","password","this","passwordInput","current","value","length","Constants","MIN_PASSWORD_LENGTH","setState","error","id","defaultMessage","values","chars","token","URLSearchParams","location","search","get","data","actions","resetUserPassword","browserHistory","push","PASSWORD_CHANGE","message","state","createRef","render","className","formClass","onSubmit","handlePasswordReset","siteName","type","name","ref","placeholder","t","spellCheck","autoFocus","PropTypes","object","isRequired","string","shape","func","connect","SiteName","getConfig","dispatch","bindActionCreators"],"mappings":"uWAae,MAAMA,UAA0BC,IAAMC,cASjDC,YAAYC,GACRC,MAAMD,GADS,6BAUGE,UAClBC,EAAEC,iBAEF,MAAMC,EAAWC,KAAKC,cAAcC,QAAQC,MAC5C,IAAKJ,GAAYA,EAASK,OAASC,IAAUC,oBAYzC,YAXAN,KAAKO,SAAS,CACVC,MACI,kBAAC,IAAD,CACIC,GAAG,sBACHC,eAAe,4CACfC,OAAQ,CACJC,MAAOP,IAAUC,yBAQrCN,KAAKO,SAAS,CAACC,MAAO,OAEtB,MAAMK,EAAS,IAAIC,gBAAgBd,KAAKN,MAAMqB,SAASC,QAASC,IAAI,UAC9D,KAACC,EAAD,MAAOV,SAAeR,KAAKN,MAAMyB,QAAQC,kBAAkBP,EAAOd,GACpEmB,GACAG,IAAeC,KAAK,gBAAkBjB,IAAUkB,iBAChDvB,KAAKO,SAAS,CAACC,MAAO,QACfA,GACPR,KAAKO,SAAS,CAACC,MAAOA,EAAMgB,YAlChCxB,KAAKyB,MAAQ,CACTjB,MAAO,MAGXR,KAAKC,cAAgBV,IAAMmC,YAkC/BC,SACI,IAAInB,EAAQ,KACRR,KAAKyB,MAAMjB,QACXA,EACI,yBAAKoB,UAAU,wBACX,2BAAOA,UAAU,iBACZ5B,KAAKyB,MAAMjB,SAM5B,IAAIqB,EAAY,aAKhB,OAJIrB,IACAqB,GAAa,cAIb,yBAAKD,UAAU,aACX,yBAAKA,UAAU,0BACX,4BACI,kBAAC,IAAD,CACInB,GAAG,sBACHC,eAAe,oBAGvB,0BAAMoB,SAAU9B,KAAK+B,qBACjB,2BACI,kBAAC,IAAD,CACItB,GAAG,sBACHC,eAAe,oDACfC,OAAQ,CACJqB,SAAUhC,KAAKN,MAAMsC,aAIjC,yBAAKJ,UAAWC,GACZ,kBAAC,IAAD,CACIpB,GAAG,qBACHwB,KAAK,WACLL,UAAU,eACVM,KAAK,WACLC,IAAKnC,KAAKC,cACVmC,YAAa,CAAC3B,GAAI4B,YAAE,qBAAsB3B,eAAgB,YAC1D4B,WAAW,QACXC,WAAW,KAGlB/B,EACD,4BACIC,GAAG,sBACHwB,KAAK,SACLL,UAAU,mBAEV,kBAAC,IAAD,CACInB,GAAG,uBACHC,eAAe,4B,EA1G1BpB,E,YACE,CACfyB,SAAUyB,IAAUC,OAAOC,WAC3BV,SAAUQ,IAAUG,OACpBxB,QAASqB,IAAUI,MAAM,CACrBxB,kBAAmBoB,IAAUK,KAAKH,aACnCA,aCEII,4BAXUrB,IACrB,MAAOsB,SAAUf,GAAYgB,oBAAUvB,GACvC,MAAO,CAACO,aAGgBiB,IAAD,CACvB9B,QAAS+B,6BAAmB,CACxB9B,uCACD6B,KAGQH,CAA6CxD","file":"28.1399cf44d88b4b79587f.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nexport default class PasswordResetForm extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            resetUserPassword: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null\n        };\n\n        this.passwordInput = React.createRef();\n    }\n\n    handlePasswordReset = async (e) => {\n        e.preventDefault();\n\n        const password = this.passwordInput.current.value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_form.error'\n                        defaultMessage='Please enter at least {chars} characters.'\n                        values={{\n                            chars: Constants.MIN_PASSWORD_LENGTH,\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({error: null});\n\n        const token = (new URLSearchParams(this.props.location.search)).get('token');\n        const {data, error} = await this.props.actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            this.setState({error: null});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {this.state.error}\n                    </label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='signup-team__container'>\n                    <h3>\n                        <FormattedMessage\n                            id='password_form.title'\n                            defaultMessage='Password Reset'\n                        />\n                    </h3>\n                    <form onSubmit={this.handlePasswordReset}>\n                        <p>\n                            <FormattedMessage\n                                id='password_form.enter'\n                                defaultMessage='Enter a new password for your {siteName} account.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                id='resetPasswordInput'\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref={this.passwordInput}\n                                placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                        </div>\n                        {error}\n                        <button\n                            id='resetPasswordButton'\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='password_form.change'\n                                defaultMessage='Change my password'\n                            />\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport PasswordResetForm from './password_reset_form';\n\nconst mapStateToProps = (state) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"sourceRoot":""}