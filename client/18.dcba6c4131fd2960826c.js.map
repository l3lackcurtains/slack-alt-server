{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/do_verify_email/do_verify_email.jsx","webpack:///./components/do_verify_email/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","DoVerifyEmail","constructor","super","async","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","data","handleSuccess","error","handleError","VerifyEmailErrors","FAILED_EMAIL_VERIFICATION","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","browserHistory","push","encodeURIComponent","setState","clearErrors","logError","message","AnnouncementBarMessages","EMAIL_VERIFIED","type","AnnouncementBarTypes","SUCCESS","trackEvent","getMe","then","err","FAILED_USER_STATE_GET","alt","src","logoImage","siteName","PropTypes","object","isRequired","string","shape","func","user","email_verified","bool","defaultProps","connect","getConfig","SiteName","Boolean","getCurrentUserId","getCurrentUser","dispatch","bindActionCreators"],"mappings":"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","file":"18.dcba6c4131fd2960826c.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/44dc1a6364d65586df56128a8b7dc29f.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nexport default class DoVerifyEmail extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Object with validation parameters given in link\n         */\n        location: PropTypes.object.isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /*\n         * Object with redux action creators\n         */\n        actions: PropTypes.shape({\n\n            /*\n             * Action creator to verify the user's email\n             */\n            verifyUserEmail: PropTypes.func.isRequired,\n\n            /*\n             * Action creator to update the user in the redux store\n             */\n            getMe: PropTypes.func.isRequired,\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Object reprenseting the current user\n         */\n        user: PropTypes.shape({\n            email_verified: PropTypes.bool,\n        }),\n\n        isLoggedIn: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: '',\n        };\n    }\n\n    componentDidMount() {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            browserHistory.push('/login?extra=verified&email=' + encodeURIComponent((new URLSearchParams(this.props.location.search)).get('email')));\n        }\n    }\n\n    handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            }, true);\n            trackEvent('settings', 'verify_email');\n            this.props.actions.getMe().then(({data, error: err}) => {\n                if (data) {\n                    this.handleRedirect();\n                } else if (err) {\n                    this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n                }\n            });\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type) {\n        let serverError = '';\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token'));\n\n        if (verify && verify.data) {\n            this.handleSuccess();\n        } else if (verify && verify.error) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDoVerifyEmail.defaultProps = {\n    location: {},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {verifyUserEmail, getMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\n\nimport DoVerifyEmail from './do_verify_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n"],"sourceRoot":""}