{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/components/more_info.tsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.tsx","webpack:///./components/user_settings/security/mfa_section/index.ts","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","React","PureComponent","componentDidMount","ids","this","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","render","showUserId","showIp","showSession","accessList","i","length","auditInfo","formatAuditInfo","uContent","iContent","sContent","className","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","ipContent","sessionContent","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","value","day","month","year","hour","minute","auditProfile","ip_address","session_id","intlShape","isRequired","PropTypes","array","bool","object","func","shape","injectIntl","connect","state","getCurrentUser","getChannelByName","channelId","bindActionCreators","JoinLeaveSection","constructor","super","e","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","AdvancedSections","JOIN_LEAVE","title","inputs","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","describe","renderOnOffLabel","string","getPreference","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","features","push","async","preferences","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","description","default","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","target","saveEnabledFeatures","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","hexRegex","ColorInput","colorPicker","current","contains","isOpened","colorInput","focus","newColorData","hex","handleChange","ch","index","join","event","startsWith","ensureLongColourValue","toUpperCase","setHex","togglePicker","setSelectionRange","createRef","color","componentWillMount","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","onBlur","onKeyDown","onFocus","selectValue","style","backgroundColor","handleColorChange","disableAlpha","ColorChooser","Component","newColor","node","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","textarea","refs","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","setTimeout","hide","on","onCodeThemeChange","componentWillUnmount","off","assign","image","UserAgent","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","role","display","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","selected","ReactDOM","findDOMNode","addClass","resetFields","removeClass","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","displayCustom","custom","premade","themeUI","allowCustomThemes","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","timezone","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manualTimezoneInput","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","updatedUser","toString","updateMe","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","ENTER","add","selectedOption","locale","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","aria-labelledby","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","enableThemeSelection","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","resendStatus","showSpinner","sendVerificationEmail","loading","handleEmailResend","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","getMe","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifLink","updateTab","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","onSubmit","submitPicture","onSetDefault","last_picture_update","setDefaultProfilePicture","defaultImageSrc","onFileChange","minMessage","number","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","soundSection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","EmailNotificationSetting","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","localizeMessage","batchingOptions","batchingInfo","enableEmailBatching","data-enable-email","data-email-interval","INTERVAL_NEVER","getEmailInterval","nextProps","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","getUserAudits","onShow","content","userAudits","Modal","dialogClassName","onHide","onExited","bsSize","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","getMonthLong","time","os","browser","platform","last_activity_at","ActivityLog","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","sessions","activityList","reduce","oneOfType","getUserSessions","getCurrentLocale","MfaSection","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ariaLabel","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","channelSidebarOrganizationOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","channel_sidebar_organization","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","helpChannelSidebarOrganizationText","renderChannelSwitcherLabel","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","showUnusedOption","showChannelSidebarOrganization","channelSidebarOrganizationDisabled","channelOrganizationSection","renderChannelOrganizationSection","channelSidebarOrganizationSection","renderChannelSidebarOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getNewSidebarPreference","getSidebarPreferences","ExperimentalChannelOrganization","ExperimentalChannelSidebarOrganization","CloseUnusedDirectMessages","UserSettings"],"mappings":"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","file":"17.80912abfaabbe5960335.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\nimport {isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defaultMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport class AuditTable extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        audits: PropTypes.array.isRequired,\n        showUserId: PropTypes.bool,\n        showIp: PropTypes.bool,\n        showSession: PropTypes.bool,\n        currentUser: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getByName: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n        }).isRequired,\n\n        getDirectTeammate: PropTypes.func.isRequired,\n    }\n\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const audits = this.props.audits;\n        const showUserId = this.props.showUserId;\n        const showIp = this.props.showIp;\n        const showSession = this.props.showSession;\n        var accessList = [];\n\n        for (var i = 0; i < audits.length; i++) {\n            const audit = audits[i];\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit) {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                auditDesc = formatMessage(holders.establishedDM, {username: this.props.getDirectTeammate(channelObj.id).username});\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        var profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const auditInfo = {};\n        auditInfo.timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        auditInfo.userId = auditProfile ? auditProfile.email : audit.user_id;\n        auditInfo.desc = auditDesc;\n        auditInfo.ip = audit.ip_address;\n        auditInfo.sessionId = audit.session_id;\n\n        return auditInfo;\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getDirectTeammate} from 'utils/utils.jsx';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n        getDirectTeammate: (channelId) => getDirectTeammate(state, channelId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview Pre-release Features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview Pre-release Features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nconst hexRegex = /^#([\\da-f]{3}|[\\da-f]{6})$/i;\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n    hex: string;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n        this.state = {\n            isOpened: false,\n            hex: this.props.color.toUpperCase(),\n        };\n    }\n\n    public componentWillMount() {\n        this.setHex();\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (this.props.color !== prevProps.color && this.ensureLongColourValue(this.state.hex) !== this.props.color) {\n            this.setHex();\n        }\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private setHex() {\n        this.setState({hex: this.props.color.toUpperCase()});\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    private ensureLongColourValue = (value: string) => {\n        if (value.length !== 4) {\n            return value;\n        }\n        return value.split('').map((ch, index) => {\n            if (index === 0) {\n                return ch;\n            }\n            return `${ch}${ch}`;\n        }).join('');\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let {value} = event.target;\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n        if (!hexRegex.test(value)) {\n            return;\n        }\n        this.setState({hex: value});\n        const {onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(this.ensureLongColourValue(value));\n        }\n    };\n\n    private onBlur = () => {\n        const {hex} = this.state;\n        if (hex.length === 4) {\n            const value = this.ensureLongColourValue(hex);\n            const {onChange: handleChange} = this.props;\n            if (handleChange && value.length === 7) {\n                handleChange(value);\n                this.setState({hex: value.toUpperCase()});\n            }\n        } else {\n            this.setHex();\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    private selectValue = (event: React.FocusEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened, hex} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={hex}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onFocus={this.selectValue}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon color-pad'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = $('.copy-theme-success');\n        copySuccess.show();\n\n        setTimeout(() => {\n            copySuccess.hide();\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe pt-2'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='pt-2'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default Appearance of Image Previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on Firefox, Edge, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop Notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email Notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pt-2'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile Push Notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words That Trigger Mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: {\n        props: {\n            os: string;\n            platform: string;\n            browser: string;\n        };\n        create_at: number;\n        last_activity_at: number;\n        id: string;\n    };\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionFunc} from 'mattermost-redux/types/actions';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\ntype Actions = {\n    deactivateMfa: () => Promise<{error?: {message: string}}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * Display the setting to toggle the new sidebar\n         */\n        showChannelSidebarOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * The preferences to show the channel sidebar organization setting\n         */\n        channelSidebarOrganizationOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            channelSidebarOrganizationOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                channel_sidebar_organization: channelSidebarOrganizationOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n            this.trackSettingChangeIfNecessary('newSidebar');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization, channelSidebarOrganizationOption} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return channelSidebarOrganizationOption === 'true' ? 'channelSidebarOrganization' : 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSidebarOrganization':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelSidebarOrganizationSection = () => {\n        const helpChannelSidebarOrganizationText = (\n            <FormattedMarkdownMessage\n                id={t('user.settings.sidebar.channelSidebarOrganizationSection.desc')}\n                defaultMessage={'When enabled, access experimental channel sidebar features, including collapsible sections and unreads filtering. [Learn more](!https://about.mattermost.com/default-sidebar/) or [give us feedback](!https://about.mattermost.com/default-sidebar-survey/)'}\n            />\n        );\n\n        let contents = (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                        defaultMessage='Experimental Sidebar Features'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSidebarOrganizationOption)}\n                section={'channelSidebarOrganization'}\n                updateSection={this.updateSection}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSidebarOrganization') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                            defaultMessage='Experimental Sidebar Features'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSidebarOrganizationSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id={t('user.settings.sidebar.channelSidebarOrganizationSectionTitle')}\n                                    defaultMessage='Experimental Sidebar Features'\n                                />\n                            </legend>\n                            <div\n                                id='channelSidebarOrganizationRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionEnabled'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_sidebar_organization', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSidebarOrganizationRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSidebarOrganizationSectionOff'\n                                        type='radio'\n                                        name='channelSidebarOrganization'\n                                        checked={this.state.settings.channel_sidebar_organization === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_sidebar_organization', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSidebarOrganizationelpText'>\n                                <br/>\n                                {helpChannelSidebarOrganizationText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_sidebar_organization'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    }\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel Grouping and Sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization, showChannelSidebarOrganization, channelSidebarOrganizationOption} = this.props;\n\n        const channelSidebarOrganizationDisabled = channelSidebarOrganizationOption === 'false';\n\n        const channelOrganizationSection = (showChannelOrganization && channelSidebarOrganizationDisabled) ? this.renderChannelOrganizationSection() : null;\n        const channelSidebarOrganizationSection = showChannelSidebarOrganization ? this.renderChannelSidebarOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = channelSidebarOrganizationDisabled ? this.renderChannelSwitcherSection() : null;\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelSidebarOrganizationSection}\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences, getNewSidebarPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const channelSidebarOrganizationOption = getNewSidebarPreference(state);\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        channelSidebarOrganizationOption: String(channelSidebarOrganizationOption),\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showChannelSidebarOrganization: config.ExperimentalChannelSidebarOrganization !== 'disabled',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}