{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./actions/views/login.js","webpack:///./components/signup/signup_email/signup_email.jsx","webpack:///./components/signup/signup_email/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","SignupEmail","Component","constructor","super","document","token","parsedData","JSON","parse","loading","email","teamName","name","actions","getTeamInviteInfo","inviteId","setState","noOpenServerError","serverError","user","trackEvent","then","browserHistory","push","encodeURIComponent","state","message","isSubmitting","setGlobalItem","stringify","usedBefore","redirectTo","URLSearchParams","location","search","get","GlobalActions","providedEmail","refs","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","Utils","values","min","Constants","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","valid","passwordConfig","e","preventDefault","isUserValid","username","allow_marketing","createUser","handleSignupSuccess","emailHelpText","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","handleSubmit","disabled","length","getTokenData","componentDidMount","setDocumentTitle","getInviteInfo","hasAccounts","body","classList","remove","componentDidUpdate","enableSignUpWithEmail","privacyPolicyLink","termsOfServiceLink","emailSignup","renderEmailSignup","terms","TermsOfServiceLink","PrivacyPolicyLink","alt","src","logoImage","PropTypes","object","bool","isRequired","string","shape","func","connect","config","getConfig","EnableSignUpWithEmail","SiteName","CustomDescriptionText","NoAccounts","getPasswordConfig","bindActionCreators"],"mappings":"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","file":"11.8f49535dbd27a0cca29d.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/44dc1a6364d65586df56128a8b7dc29f.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost'\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        termsOfServiceLink: PropTypes.string,\n        privacyPolicyLink: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        hasAccounts: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            createUser: PropTypes.func.isRequired,\n            loginById: PropTypes.func.isRequired,\n            setGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const data = (new URLSearchParams(this.props.location.search)).get('d');\n        const token = (new URLSearchParams(this.props.location.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n\n        this.state = {};\n        if (token && token.length > 0) {\n            this.state = this.getTokenData(token, data);\n        } else if (inviteId && inviteId.length > 0) {\n            this.state = {\n                loading: true,\n                inviteId,\n            };\n        }\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n\n        this.setDocumentTitle(this.props.siteName);\n\n        const {inviteId} = this.state;\n        if (inviteId && inviteId.length > 0) {\n            this.getInviteInfo(inviteId);\n        }\n\n        if (!this.props.hasAccounts) {\n            document.body.classList.remove('sticky');\n        }\n    }\n\n    componentDidUpdate() {\n        this.setDocumentTitle(this.props.siteName);\n    }\n\n    setDocumentTitle = (siteName) => {\n        if (siteName) {\n            document.title = siteName;\n        }\n    }\n\n    getTokenData = (token, data) => {\n        const parsedData = JSON.parse(data);\n\n        return {\n            loading: false,\n            token,\n            email: parsedData.email,\n            teamName: parsedData.name,\n        };\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                loading: false,\n                noOpenServerError: false,\n                serverError: '',\n                teamName: data.name,\n            });\n        } else if (error) {\n            this.setState({loading: false,\n                noOpenServerError: true,\n                serverError: (\n                    <FormattedMessage\n                        id='signup_user_completed.invalid_invite'\n                        defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleSignupSuccess = (user, data) => {\n        trackEvent('signup', 'signup_user_02_complete');\n\n        this.props.actions.loginById(data.id, user.password, '').then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: error.message,\n                        isSubmitting: false,\n                    });\n                }\n\n                return;\n            }\n\n            if (this.state.token > 0) {\n                this.props.actions.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n            }\n\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                browserHistory.push(redirectTo);\n            } else {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        });\n    }\n\n    isUserValid = () => {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        trackEvent('signup_email', 'click_create_account');\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true,\n            };\n\n            this.props.actions.createUser(user, this.state.token, this.state.inviteId).then((result) => {\n                if (result.error) {\n                    this.setState({\n                        serverError: result.error.message,\n                        isSubmitting: false,\n                    });\n                    return;\n                }\n\n                this.handleSignupSuccess(user, result.data);\n            });\n        }\n    }\n\n    renderEmailSignup = () => {\n        let emailError = null;\n        let emailHelpText = (\n            <span\n                id='valid_email'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span\n                id='valid_name'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'mt-8';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5 id='email_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.whatis'\n                                    defaultMessage=\"What's your email address?\"\n                                />\n                            </strong>\n                        </h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='mt-8'>\n                        <h5 id='name_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.chooseUser'\n                                    defaultMessage='Choose your username'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='mt-8'>\n                        <h5 id='password_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.choosePwd'\n                                    defaultMessage='Choose your password'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='mt-5'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n            hasAccounts,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div\n                    id='existingEmailErrorContainer'\n                    className={'form-group has-error'}\n                >\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p id='signup_agreement'>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: `!${termsOfServiceLink}`,\n                            PrivacyPolicyLink: `!${privacyPolicyLink}`,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                {hasAccounts && <BackButton onClick={() => trackEvent('signup_email', 'click_back')}/>}\n                <div\n                    id='signup_email_section'\n                    className='col-sm-12'\n                >\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4\n                            id='create_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span\n                            id='signin_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                id='signin_account_link'\n                                to={'/login' + location.search}\n                                onClick={() => trackEvent('signup_email', 'click_signin_account')}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {createUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {loginById} from 'actions/views/login';\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SignupEmail from './signup_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName;\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n    const hasAccounts = config.NoAccounts === 'false';\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n        hasAccounts,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createUser,\n            loginById,\n            setGlobalItem,\n            getTeamInviteInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupEmail);\n"],"sourceRoot":""}